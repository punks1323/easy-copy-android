// Generated by Dagger (https://dagger.dev).
package com.easycopy.core.di.module;

import com.easycopy.data.DataManager;
import com.easycopy.data.local.pref.PrefManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvidesDataManagerFactory implements Factory<DataManager> {
  private final ApplicationModule module;

  private final Provider<PrefManager> prefManagerProvider;

  public ApplicationModule_ProvidesDataManagerFactory(ApplicationModule module,
      Provider<PrefManager> prefManagerProvider) {
    this.module = module;
    this.prefManagerProvider = prefManagerProvider;
  }

  @Override
  public DataManager get() {
    return providesDataManager(module, prefManagerProvider.get());
  }

  public static ApplicationModule_ProvidesDataManagerFactory create(ApplicationModule module,
      Provider<PrefManager> prefManagerProvider) {
    return new ApplicationModule_ProvidesDataManagerFactory(module, prefManagerProvider);
  }

  public static DataManager providesDataManager(ApplicationModule instance,
      PrefManager prefManager) {
    return Preconditions.checkNotNull(instance.providesDataManager(prefManager), "Cannot return null from a non-@Nullable @Provides method");
  }
}
