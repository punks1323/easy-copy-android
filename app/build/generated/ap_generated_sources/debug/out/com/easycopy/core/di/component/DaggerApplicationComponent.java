// Generated by Dagger (https://dagger.dev).
package com.easycopy.core.di.component;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import com.easycopy.EasyCopyApplication;
import com.easycopy.EasyCopyApplication_MembersInjector;
import com.easycopy.core.di.builder.ActivityBuilder_BindHomeActivity;
import com.easycopy.core.di.module.ApplicationModule;
import com.easycopy.core.di.module.ApplicationModule_ProvideContextFactory;
import com.easycopy.core.di.module.ApplicationModule_ProvidesDataManagerFactory;
import com.easycopy.core.di.module.ApplicationModule_ProvidesPrefManagerFactory;
import com.easycopy.core.di.module.ApplicationModule_ProvidesSharedPrefNameFactory;
import com.easycopy.core.di.module.ApplicationModule_ProvidesSharedPreferenceFactory;
import com.easycopy.data.DataManager;
import com.easycopy.data.local.pref.PrefManager;
import com.easycopy.screen.home.HomeActivity;
import com.easycopy.screen.home.HomeActivity_MembersInjector;
import com.easycopy.screen.home.HomeViewModel;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Factory> homeActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<String> providesSharedPrefNameProvider;

  private Provider<SharedPreferences> providesSharedPreferenceProvider;

  private Provider<PrefManager> providesPrefManagerProvider;

  private Provider<DataManager> providesDataManagerProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam,
      Application applicationParam) {

    initialize(applicationModuleParam, applicationParam);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(HomeActivity.class, (Provider) homeActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam,
      final Application applicationParam) {
    this.homeActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Factory get() {
        return new HomeActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider(ApplicationModule_ProvideContextFactory.create(applicationModuleParam, applicationProvider));
    this.providesSharedPrefNameProvider = ApplicationModule_ProvidesSharedPrefNameFactory.create(applicationModuleParam);
    this.providesSharedPreferenceProvider = DoubleCheck.provider(ApplicationModule_ProvidesSharedPreferenceFactory.create(applicationModuleParam, provideContextProvider, providesSharedPrefNameProvider));
    this.providesPrefManagerProvider = DoubleCheck.provider(ApplicationModule_ProvidesPrefManagerFactory.create(applicationModuleParam, providesSharedPreferenceProvider));
    this.providesDataManagerProvider = DoubleCheck.provider(ApplicationModule_ProvidesDataManagerFactory.create(applicationModuleParam, providesPrefManagerProvider));
  }

  @Override
  public void inject(EasyCopyApplication app) {
    injectEasyCopyApplication(app);}

  private EasyCopyApplication injectEasyCopyApplication(EasyCopyApplication instance) {
    EasyCopyApplication_MembersInjector.injectDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerApplicationComponent(new ApplicationModule(), application);
    }
  }

  private final class HomeActivitySubcomponentFactory implements ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent create(HomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl implements ActivityBuilder_BindHomeActivity.HomeActivitySubcomponent {
    private HomeActivitySubcomponentImpl(HomeActivity arg0) {

    }

    private HomeViewModel getHomeViewModel() {
      return new HomeViewModel(DaggerApplicationComponent.this.providesDataManagerProvider.get());}

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);}

    private HomeActivity injectHomeActivity(HomeActivity instance) {
      HomeActivity_MembersInjector.injectHomeViewModel(instance, getHomeViewModel());
      return instance;
    }
  }
}
